---
// Save as src/components/ChatInterface.astro
import NavBar from "../components/NavBar.astro";
import "../styles/global.css";
---

<NavBar />
<div class="max-w-4xl mx-auto p-4">
  <!-- Chat container -->
  <div class="flex flex-col h-[80vh] bg-white rounded-lg shadow-lg">
    <!-- Message history -->
    <div id="messageHistory" class="flex-1 overflow-y-auto p-4 space-y-4">
      <!-- Welcome message -->
      <div class="flex items-start space-x-3">
          <img src="https://cdn-icons-png.freepik.com/256/6988/6988878.png?semt=ais_hybrid" class="w-8 h-8" alt="pet icon">
        <div class="flex-1">
          <p class="text-gray-600">Pet Pilot</p>
          <div class="mt-1 text-gray-800">
            Hello! How can I help you today?
          </div>
        </div>
      </div>
    </div>

    <!-- Input area -->
    <div class="border-t p-4">
      <form id="chatForm" class="flex space-x-4">
        <textarea
          id="userInput"
          class="flex-1 min-h-[80px] p-3 border rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Type your message here..."
        ></textarea>
        <button
          type="submit"
          class="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 h-fit self-end"
        >
          Send
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  interface Message {
    role: 'user' | 'assistant';
    content: string;
  }

  const chatForm = document.getElementById('chatForm') as HTMLFormElement;
  const messageHistory = document.getElementById('messageHistory') as HTMLDivElement;
  const userInput = document.getElementById('userInput') as HTMLTextAreaElement;

  let messages: Message[] = [];
  function addMessageToHistory(role: 'user' | 'assistant', content: string) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex items-start space-x-3';
    
    const avatar = document.createElement('img');
    avatar.className = 'w-8 h-8';
    avatar.alt = role === 'assistant' ? 'pet icon' : 'user icon';
    // Set appropriate image source based on role
    avatar.src = role === 'assistant' 
        ? 'https://cdn-icons-png.freepik.com/256/6988/6988878.png?semt=ais_hybrid'
        : 'https://cdn-icons-png.flaticon.com/512/1077/1077114.png';

    const contentContainer = document.createElement('div');
    contentContainer.className = 'flex-1';

    const roleLabel = document.createElement('p');
    roleLabel.className = 'text-gray-600';
    roleLabel.textContent = role === 'assistant' ? 'Pet Pilot' : 'You';

    const messageContent = document.createElement('div');
    messageContent.className = 'mt-1 text-gray-800 whitespace-pre-wrap';
    messageContent.textContent = content;

    contentContainer.appendChild(roleLabel);
    contentContainer.appendChild(messageContent);

    messageDiv.appendChild(avatar);
    messageDiv.appendChild(contentContainer);
    messageHistory.appendChild(messageDiv);
    
    // Auto scroll to bottom
    messageHistory.scrollTop = messageHistory.scrollHeight;
}

  chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const userMessage = userInput.value.trim();
    if (!userMessage) return;

    // Clear input
    userInput.value = '';

    // Add user message to history
    addMessageToHistory('user', userMessage);
    messages.push({ role: 'user', content: userMessage });

    try {
      const response = await fetch('http://localhost:3000/api/v1/pet_health/query', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          query: userMessage,
          messages: messages // Send full message history
        }),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      const assistantMessage = data.response || data.message || JSON.stringify(data);
      
      // Add assistant response to history
      addMessageToHistory('assistant', assistantMessage);
      messages.push({ role: 'assistant', content: assistantMessage });

    } catch (error) {
      console.error('Error:', error);
      addMessageToHistory('assistant', 'I apologize, but I encountered an error. Please try again.');
    }
  });

  // Handle textarea height
  userInput.addEventListener('input', () => {
    userInput.style.height = 'auto';
    userInput.style.height = Math.min(userInput.scrollHeight, 200) + 'px';
  });

  // Handle Enter key to submit (Shift+Enter for new line)
  userInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      chatForm.requestSubmit();
    }
  });
</script>